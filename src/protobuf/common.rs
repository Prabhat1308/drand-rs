// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Address {
    #[prost(string, tag = "1")]
    pub address: ::prost::alloc::string::String,
    #[prost(bool, tag = "2")]
    pub tls: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StatusRequest {
    /// the check_conn contains the list of addresses to check connectivity to,
    /// i.e. calls Home() on it.
    /// If the field is absent or empty, then there is no connectivity checks.
    #[prost(message, repeated, tag = "1")]
    pub check_conn: ::prost::alloc::vec::Vec<Address>,
    #[prost(message, optional, tag = "2")]
    pub metadata: ::core::option::Option<Metadata>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Empty {
    #[prost(message, optional, tag = "1")]
    pub metadata: ::core::option::Option<Metadata>,
}
/// REMINDER: This fields should be kept in sync with IdentityResponse message
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Identity {
    #[prost(string, tag = "1")]
    pub address: ::prost::alloc::string::String,
    #[prost(bytes = "vec", tag = "2")]
    pub key: ::prost::alloc::vec::Vec<u8>,
    #[prost(bool, tag = "3")]
    pub tls: bool,
    /// BLS signature over the identity to prove possession of the private key
    #[prost(bytes = "vec", tag = "4")]
    pub signature: ::prost::alloc::vec::Vec<u8>,
}
/// Node holds the information related to a server in a group that forms a drand
/// network
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Node {
    #[prost(message, optional, tag = "1")]
    pub public: ::core::option::Option<Identity>,
    #[prost(uint32, tag = "2")]
    pub index: u32,
}
/// GroupPacket represents a group that is running a drand network (or is in the
/// process of creating one or performing a resharing).
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GroupPacket {
    #[prost(message, repeated, tag = "1")]
    pub nodes: ::prost::alloc::vec::Vec<Node>,
    #[prost(uint32, tag = "2")]
    pub threshold: u32,
    /// period in seconds
    #[prost(uint32, tag = "3")]
    pub period: u32,
    #[prost(uint64, tag = "4")]
    pub genesis_time: u64,
    #[prost(uint64, tag = "5")]
    pub transition_time: u64,
    #[prost(bytes = "vec", tag = "6")]
    pub genesis_seed: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes = "vec", repeated, tag = "7")]
    pub dist_key: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
    /// catchup_period in seconds
    #[prost(uint32, tag = "8")]
    pub catchup_period: u32,
    #[prost(string, tag = "9")]
    pub scheme_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "10")]
    pub metadata: ::core::option::Option<Metadata>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ChainInfoPacket {
    /// marshalled public key
    #[prost(bytes = "vec", tag = "1")]
    pub public_key: ::prost::alloc::vec::Vec<u8>,
    /// period in seconds
    #[prost(uint32, tag = "2")]
    pub period: u32,
    /// genesis time of the chain
    #[prost(int64, tag = "3")]
    pub genesis_time: i64,
    /// hash is included for ease of use - not needing to have a drand client to
    /// compute its hash
    #[prost(bytes = "vec", tag = "4")]
    pub hash: ::prost::alloc::vec::Vec<u8>,
    /// hash of the genesis group
    #[prost(bytes = "vec", tag = "5")]
    pub group_hash: ::prost::alloc::vec::Vec<u8>,
    /// indicates a set of values the process will use to act in specific ways
    #[prost(string, tag = "6")]
    pub scheme_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "7")]
    pub metadata: ::core::option::Option<Metadata>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NodeVersion {
    #[prost(uint32, tag = "1")]
    pub major: u32,
    #[prost(uint32, tag = "2")]
    pub minor: u32,
    #[prost(uint32, tag = "3")]
    pub patch: u32,
    #[prost(string, tag = "4")]
    pub prerelease: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Metadata {
    #[prost(message, optional, tag = "1")]
    pub node_version: ::core::option::Option<NodeVersion>,
    #[prost(string, tag = "2")]
    pub beacon_id: ::prost::alloc::string::String,
    #[prost(bytes = "vec", tag = "3")]
    pub chain_hash: ::prost::alloc::vec::Vec<u8>,
}
